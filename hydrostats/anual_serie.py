# -*- coding: utf-8 -*-
"""anual_serie.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d0EAAU0CvzVrVystfSIDSr5IXh6rpjRj
"""

class anualSerie(pd.DataFrame):
  """
  Serie de máximos anuais de alturas pluviométricas diárias de uma estação.
  """

  def get_frequency(self, method):
    """
    Calcula os parametros das principais distribuições probabilisticas pelos
    metodos dos momentos ordinários (MOM), momentos-L (MML) e Momentos de Máxima
    verossimilhança (MMV).
    """
    ...

  def get_series(self, timestamp):
    """
    cria uma nova série contendo as alturas de chuva totais para a duração
    definida pelo usuário. Deve-se selecionar durações inteiras e superiores a
    1 dia.
    """
    ...

  def homogeneity(self, confidenceLevel):
    """
    Calcula o teste de hipótese por Mann e Whitney (1947) deve retornar o p-value,
    resultado do teste (rejeita-se ou não rejeita-se a hipótese nula) e
     o valor da estatística do teste.
    """
    ...

  def randomness(self, confidenceLevel):
    """
    Calcula o teste de hipótese pelo método em NERC (1975).
    deve retornar o p-value, resultado do teste (rejeita-se ou não rejeita-se a
    hipótese nula) e o valor da estatística do teste.
    """
    ...

  def independecy(self, confidenceLevel):
    """
    Calcula o teste de hipótese de independência por Wald e Wolfwitz (1943). de-
    ve retornar o p-value, resultado do teste (rejeita-se ou não rejeita-se a
    hipótese nula) e o valor da estatística do teste.
    """
    ...
  def stationarity(self, confidenceLevel):
    """
    Calcula o teste de hipótese de estacionariedade (Spearman) descrito por
    NERC (1975). Deve retornar o p-value, resultado do teste (rejeita-se ou não
    rejeita-se a hipótese nula) e o valor da estatística do teste.
    """
    ...

  def qui_quadrado(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência qui-quadrado para um determinado nível de significancia.
    """
    ...

  def kolmogorov_smirnov(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência de kolmogorov_smirnov para um determinado nível de significancia.
    """
    ...

  def anderson_darling(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência de anderson_darling para um determinado nível de significancia.
    """
    ...

  def filliben(self, confidenceLeval, distr, parameters):
    """
    Calcula o teste de aderência de filliben para um determinado nível de significancia.
    """
    ...

  def Grubbs_back(self):
    """
    Calcula o teste para detecção de outliers de Grubbs e back (1950, 1969, 1979).
    """
    ...